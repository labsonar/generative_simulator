import numpy as np
import os
import torch
import torchaudio

from argparse import ArgumentParser

from model_lib.inference import predict
from model_lib.params import AttrDict, params as base_params

# requer que o espectrograma seja fornecido explicitamente ou gerado previamente

def main(args):
  os.makedirs(args.output,exist_ok=True)

  for i in range(args.n_times):

    if args.spectrogram_path:
      spectrogram = torch.from_numpy(np.load(args.spectrogram_path))
    else:
      spectrogram = None
    audio, sr = predict(spectrogram, model_dir=args.model_dir, fast_sampling=args.fast, params=base_params)
    torchaudio.save(os.path.join(args.output,f"{i}.wav"), audio.cpu(), sample_rate=sr)


if __name__ == '__main__':
  parser = ArgumentParser(description='runs inference on a spectrogram file generated by diffwave.preprocess')
  parser.add_argument('model_dir',
      help='directory containing a trained model (or full path to weights.pt file)')
  parser.add_argument('--spectrogram_path', '-s',
      help='path to a spectrogram file generated by diffwave.preprocess')
  parser.add_argument('--output', '-o', default='./',
      help='output directory name')
  parser.add_argument('--fast', '-f', action='store_true',
      help='fast sampling procedure')
  parser.add_argument('--n_times', '-t', default= 1,type=int ,
      help='number of samples')
  main(parser.parse_args())